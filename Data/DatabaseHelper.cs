using System;using System.Collections.Generic;using System.Data.SQLite;using System.IO;using System.Threading.Tasks;using LojaConstrucao.Models;using LojaConstrucao.Utils;namespace LojaConstrucao.Data{public static class DatabaseHelper{private static readonly string DbFile="loja.db";private static readonly string ConnectionString=$"Data Source={DbFile};Version=3;";static DatabaseHelper(){InitializeDatabase();}private static void InitializeDatabase(){try{if(!File.Exists(DbFile)){SQLiteConnection.CreateFile(DbFile);CreateTables();CreateDefaultUser();Logger.LogInfo("Database inicializado");}}catch(Exception ex){Logger.LogError("Erro ao inicializar DB",ex);throw;}}private static void CreateTables(){using var conn=new SQLiteConnection(ConnectionString);conn.Open();var sql=@"CREATE TABLE IF NOT EXISTS Usuarios(Id INTEGER PRIMARY KEY AUTOINCREMENT,Nome TEXT NOT NULL UNIQUE,Senha TEXT NOT NULL,DataCriacao TEXT NOT NULL);CREATE TABLE IF NOT EXISTS Produtos(Id INTEGER PRIMARY KEY AUTOINCREMENT,Nome TEXT NOT NULL,Preco REAL NOT NULL,Quantidade INTEGER NOT NULL,DataCriacao TEXT NOT NULL);CREATE TABLE IF NOT EXISTS Clientes(Id INTEGER PRIMARY KEY AUTOINCREMENT,Nome TEXT NOT NULL,Telefone TEXT,Email TEXT,Endereco TEXT,DataCriacao TEXT NOT NULL);CREATE TABLE IF NOT EXISTS Vendas(Id INTEGER PRIMARY KEY AUTOINCREMENT,Cliente TEXT NOT NULL,Produtos TEXT NOT NULL,ValorTotal REAL NOT NULL DEFAULT 0,Data TEXT NOT NULL,FormaPagamento TEXT,Status TEXT DEFAULT 'Concluida');";using var cmd=new SQLiteCommand(sql,conn);cmd.ExecuteNonQuery();}private static void CreateDefaultUser(){try{var hashedPassword=SecurityHelper.HashPassword("admin123");using var conn=new SQLiteConnection(ConnectionString);conn.Open();var sql="INSERT OR IGNORE INTO Usuarios(Nome,Senha,DataCriacao)VALUES(@nome,@senha,@data)";using var cmd=new SQLiteCommand(sql,conn);cmd.Parameters.AddWithValue("@nome","admin");cmd.Parameters.AddWithValue("@senha",hashedPassword);cmd.Parameters.AddWithValue("@data",DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));cmd.ExecuteNonQuery();Logger.LogInfo("Usuario admin criado");}catch(Exception ex){Logger.LogError("Erro ao criar usuario",ex);}}public static async Task<bool> ValidarUsuarioAsync(string nome,string senha){try{using var conn=new SQLiteConnection(ConnectionString);await conn.OpenAsync();var sql="SELECT Senha FROM Usuarios WHERE Nome=@nome";using var cmd=new SQLiteCommand(sql,conn);cmd.Parameters.AddWithValue("@nome",ValidationHelper.SanitizeInput(nome));var storedHash=await cmd.ExecuteScalarAsync()as string;if(string.IsNullOrEmpty(storedHash)){Logger.LogSecurity("LOGIN_ATTEMPT",nome,false);return false;}var isValid=SecurityHelper.VerifyPassword(senha,storedHash);Logger.LogSecurity("LOGIN_ATTEMPT",nome,isValid);return isValid;}catch(Exception ex){Logger.LogError($"Erro validacao usuario {nome}",ex);return false;}}public static async Task<bool> AdicionarProdutoAsync(Produto produto){try{using var conn=new SQLiteConnection(ConnectionString);await conn.OpenAsync();var sql="INSERT INTO Produtos(Nome,Preco,Quantidade,DataCriacao)VALUES(@nome,@preco,@qtd,@data)";using var cmd=new SQLiteCommand(sql,conn);cmd.Parameters.AddWithValue("@nome",ValidationHelper.SanitizeInput(produto.Nome));cmd.Parameters.AddWithValue("@preco",produto.Preco);cmd.Parameters.AddWithValue("@qtd",produto.Quantidade);cmd.Parameters.AddWithValue("@data",DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));var result=await cmd.ExecuteNonQueryAsync();Logger.LogInfo($"Produto adicionado: {produto.Nome}");return result>0;}catch(Exception ex){Logger.LogError($"Erro adicionar produto {produto.Nome}",ex);return false;}}public static async Task<List<Produto>> ListarProdutosAsync(){var lista=new List<Produto>();try{using var conn=new SQLiteConnection(ConnectionString);await conn.OpenAsync();var sql="SELECT * FROM Produtos ORDER BY Nome";using var cmd=new SQLiteCommand(sql,conn);using var reader=await cmd.ExecuteReaderAsync();while(await reader.ReadAsync()){lista.Add(new Produto{Id=Convert.ToInt32(reader["Id"]),Nome=reader["Nome"].ToString(),Preco=Convert.ToDecimal(reader["Preco"]),Quantidade=Convert.ToInt32(reader["Quantidade"])});}}catch(Exception ex){Logger.LogError("Erro listar produtos",ex);}return lista;}public static async Task<bool> RemoverProdutoAsync(int id){try{using var conn=new SQLiteConnection(ConnectionString);await conn.OpenAsync();var sql="DELETE FROM Produtos WHERE Id=@id";using var cmd=new SQLiteCommand(sql,conn);cmd.Parameters.AddWithValue("@id",id);var result=await cmd.ExecuteNonQueryAsync();Logger.LogInfo($"Produto removido: ID {id}");return result>0;}catch(Exception ex){Logger.LogError($"Erro remover produto ID {id}",ex);return false;}}public static async Task<bool> AdicionarClienteAsync(Cliente cliente){try{using var conn=new SQLiteConnection(ConnectionString);await conn.OpenAsync();var sql="INSERT INTO Clientes(Nome,Telefone,Email,Endereco,DataCriacao)VALUES(@nome,@telefone,@email,@endereco,@data)";using var cmd=new SQLiteCommand(sql,conn);cmd.Parameters.AddWithValue("@nome",ValidationHelper.SanitizeInput(cliente.Nome));cmd.Parameters.AddWithValue("@telefone",ValidationHelper.SanitizeInput(cliente.Telefone));cmd.Parameters.AddWithValue("@email",ValidationHelper.SanitizeInput(cliente.Email));cmd.Parameters.AddWithValue("@endereco",ValidationHelper.SanitizeInput(cliente.Endereco));cmd.Parameters.AddWithValue("@data",DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));var result=await cmd.ExecuteNonQueryAsync();Logger.LogInfo($"Cliente adicionado: {cliente.Nome}");return result>0;}catch(Exception ex){Logger.LogError($"Erro adicionar cliente {cliente.Nome}",ex);return false;}}public static async Task<List<Cliente>> ListarClientesAsync(){var lista=new List<Cliente>();try{using var conn=new SQLiteConnection(ConnectionString);await conn.OpenAsync();var sql="SELECT * FROM Clientes ORDER BY Nome";using var cmd=new SQLiteCommand(sql,conn);using var reader=await cmd.ExecuteReaderAsync();while(await reader.ReadAsync()){lista.Add(new Cliente{Id=Convert.ToInt32(reader["Id"]),Nome=reader["Nome"].ToString(),Telefone=reader["Telefone"]?.ToString()??"",Email=reader["Email"]?.ToString()??"",Endereco=reader["Endereco"]?.ToString()??""});}}catch(Exception ex){Logger.LogError("Erro listar clientes",ex);}return lista;}public static async Task<bool> RemoverClienteAsync(int id){try{using var conn=new SQLiteConnection(ConnectionString);await conn.OpenAsync();var sql="DELETE FROM Clientes WHERE Id=@id";using var cmd=new SQLiteCommand(sql,conn);cmd.Parameters.AddWithValue("@id",id);var result=await cmd.ExecuteNonQueryAsync();Logger.LogInfo($"Cliente removido: ID {id}");return result>0;}catch(Exception ex){Logger.LogError($"Erro remover cliente ID {id}",ex);return false;}}public static async Task<bool> RegistrarVendaAsync(Venda venda){try{using var conn=new SQLiteConnection(ConnectionString);await conn.OpenAsync();var sql="INSERT INTO Vendas(Cliente,Produtos,ValorTotal,Data,FormaPagamento,Status)VALUES(@cliente,@produtos,@valor,@data,@pagamento,@status)";using var cmd=new SQLiteCommand(sql,conn);cmd.Parameters.AddWithValue("@cliente",ValidationHelper.SanitizeInput(venda.Cliente));cmd.Parameters.AddWithValue("@produtos",ValidationHelper.SanitizeInput(venda.Produtos));cmd.Parameters.AddWithValue("@valor",venda.ValorTotal);cmd.Parameters.AddWithValue("@data",venda.Data.ToString("yyyy-MM-dd HH:mm:ss"));cmd.Parameters.AddWithValue("@pagamento",ValidationHelper.SanitizeInput(venda.FormaPagamento));cmd.Parameters.AddWithValue("@status",ValidationHelper.SanitizeInput(venda.Status));var result=await cmd.ExecuteNonQueryAsync();Logger.LogInfo($"Venda registrada: {venda.Cliente}");return result>0;}catch(Exception ex){Logger.LogError($"Erro registrar venda {venda.Cliente}",ex);return false;}}public static async Task<List<Venda>> ListarVendasAsync(){var lista=new List<Venda>();try{using var conn=new SQLiteConnection(ConnectionString);await conn.OpenAsync();var sql="SELECT * FROM Vendas ORDER BY Data DESC";using var cmd=new SQLiteCommand(sql,conn);using var reader=await cmd.ExecuteReaderAsync();while(await reader.ReadAsync()){lista.Add(new Venda{Id=Convert.ToInt32(reader["Id"]),Cliente=reader["Cliente"].ToString(),Produtos=reader["Produtos"].ToString(),ValorTotal=Convert.ToDecimal(reader["ValorTotal"]),Data=DateTime.Parse(reader["Data"].ToString()),FormaPagamento=reader["FormaPagamento"]?.ToString()??"",Status=reader["Status"]?.ToString()??"Concluida"});}}catch(Exception ex){Logger.LogError("Erro listar vendas",ex);}return lista;}}}